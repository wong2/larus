{"name":"Larus","tagline":"Larus is a simplified Gunicorn clone","body":"Larus: A WSGI HTTP Server [WIP]\r\n--------------------------\r\n\r\n### Introduction\r\n\r\nLarus is a simplified Gunicorn clone\r\n\r\n### Install\r\n\r\nFrom PyPI:\r\n\r\n    $ pip install larus\r\n\r\nFrom source:\r\n\r\n    $ python setup.py install\r\n\r\n### Usage\r\n\r\n    Usage: larus [OPTIONS] MODULE_APP\r\n\r\n    Options:\r\n      -w, --workers INTEGER  number of workers, default: 1\r\n      -b, --bind TEXT        address to bind: host:port, default: 127.0.0.1:8000\r\n      -c, --chdir TEXT       change the working director\r\n      --help                 Show this message and exit.\r\n\r\nFor example, if `myapp.py` contains the wsgi app `app`, we can serve it with larus with:\r\n\r\n    larus myapp:app\r\n\r\nwith `4` workers and bind to `0.0.0.0:5000`:\r\n\r\n    larus -w 4 -b 0.0.0.0:5000 myapp:app\r\n\r\n### Signals\r\n\r\nYou can use signals to dynamically increment or decrement the number of workers while serving:\r\n\r\n* `TTIN`: Increment the number of workers by one\r\n* `TTOU`: Decrement the number of workers by one\r\n\r\n### TODO\r\n\r\n* Add more worker types\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}